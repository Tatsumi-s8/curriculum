「ロジック」・・・プログラムを処理するための内容や手順のことを指す。 目的のために必要な動作の流れを決めることは「ロジックを組む」と呼ばれ、このロジックに従ってプログラミングを進めていく。

「デバッグ」・・・プログラムの誤り・不具合（＝バグ）を見つけ、手直しをすること。

「開発手法(ウォーターフォール開発、アジャイル開発)」
・ウォーターフォール開発...ウォーターフォール型開発とは、開発現場でよく用いられる手法で、開発手順を1つずつ確認しながら工程を進めていく手法のこと。要件定義や、外部設計、内部設計、といった工程を、上流工程から下流工程へ順におこなっていくことで、常に計画性を保ち、開発をおこなうことができる。各工程が完了するまでは次の工程に進まないという特徴があり、また前の工程には戻らないという手法になるため、ひとつひとつの工程に抜け漏れがないかどうか厳重に管理しながら進めていく必要がある。

・アジャイル開発...クライアントの要望に応えるシステムをできる限り素早くリリースしようという考えに基づいている開発手法で、クライアントのビジネスの始動を早めようという目的がある。要件定義や外部設計、内部設計などの工程を少しずつ反復して行うため、ユーザーからの要望に応じたアップデートなどに対応しやすい手法だとされている。開発メンバーがシステムにおける優先度に順位をつけ、短い期間での納品を目指すため、システムの優先順位を決めるためにミーティングを毎日行い、チーム内でスムーズに連携をとる「スクラム」という手法を取る。

「アルゴリズム」・・・問題解決にいたる手順・方法のこと。「暗号化アルゴリズム」=「暗号化のやり方」のような。

「フローチャート図」・・・工程や手順の流れを図示する手法の一つ。個々の段階を箱で表し、それらを順序や論理の推移に従って矢印や線分で結んだもの。別名、流れ図。

「設計書(外部設計、内部設計)」
・外部設計...要件定義で決定した機能や性能、制約条件などを基にしたシステムの基本となる設計を作ること。操作画面や操作方法、データ出力など、ユーザーから見えるインターフェース部分の仕様を決定したり、セキュリティや運用規定、システム開発のスケジュールや費用などを設計したりと、基本的に「ユーザーに向けた仕様を設計する」のが外部設計。

・内部設計...外部設計を基に、システム内部の動作や機能、物理データなど、ユーザーから見えない詳細な部分の設計すること。プログラム機能を単体に分割し、そこで使用する物理データや入出力を設計する。外部設計の結果をプログラミングしやすくするのが内部設計の役割である。

「要件定義(要求仕様書)」・・・クライアントがシステムに求めている機能や、満たすべき性能をまとめ、仕様や範囲を決めること。例えば、必要な機能や性能、要求される信頼性や保守性、そのほか実現すべき業務モデルや業務フローなどについて、クライアントの要望を詳しくヒアリングし、要件定義書を作成する。要件定義の精度が高いほど外部設計を行いやすく、その後の仕様変更を減らすことができる。

「システム開発におけるテスト(単体テスト、結合テスト、総合テスト)」
・単体テスト・・・開発したシステムを機能ごとに検証すること。プログラミングが完了してから一番最初に行われるテストであり、関数またはメンバー関数単位で不具合を分析するのが一般的
・結合テスト・・・システムにおける複数の機能を組み合わせて動作を検証すること。単体テスト完了後に行われる。
・総合テスト・・・システムにおける機能をすべて結合して、本番と似た環境でシステムを検証すること。開発したシステムを全体的に検証するため「システムテスト」と呼ばれることもある。発注者の要求を満たした業務システムを開発できているか確認するのが目的。

「テスト仕様書(どのようなもの、項目)」
・概要・・・テスト内容をまとめた資料で、入力や条件、出力や確認事項(要するに要件定義書の通りに機能するか?)などを書く。
・テスト仕様書で必須な項目
　　1,テストを実施した環境
　　2,実施するテストの内容
　　3,テストを実施するためのシステムの操作手順
　　4,テストの実行結果
　　5,個々のテスト項目を識別するための番号や記号（通し番号など）
　　6,テストを実施した年月日
　　7,テストを実行した担当者
　　8,障害報告票番号（発生した障害の詳細を開発グループに報告する帳票の識別番号）

「バリデーション」・・・入力・記述したデータがあらかじめ規定された条件や仕様、形式などに適合しているか検証、確認すること。

「ログ(意味、確認の仕方)」
・意味・・・コンピュータ上で行われた処理や操作の記録
・確認の仕方・・・ログ管理システムの使用や、Windows OSの場合「イベントビューアー」で、Mac Osの場合「コンソール」からPCログが確認できる。

「FW(フレームワーク)」・・・システム開発を楽にするために作られた、プログラミングなどのひながたのこと。

「PHPのFWの種類と特徴」
・cakephp・・・2005年に登場。phpについて経験が浅いエンジニアでも比較的簡単に扱うことができ、効率よく高速開発ができる機能が多数用意されているのが特徴。
・Laravel・・・2011年に登場。他のFWに比べ速度は遅いが、コードが書きやすく、初心者でも開発しやすいのが特徴。
・Symfony・・・機能テストやデバックのためのツールが標準装備されていたり、毎年2回リリースアップされるなどサポートについても明確なルールを持つのが特徴。保守性と安全性を重視した構造。
・codeIgniter・・・2006年に登場したWebサイト開発用のオープンソースphpアプリケーションフレームワーク。高速、軽量、シンプル、勉強コストの低さ、高い自由度などが特徴。
・Phalcon・・・2012年に登場したフルスタック高速フレームワーク。他のFWを圧倒するスピードを持つ。
・FuelPHP・・・2010年に登場。既存のFWの長所を継承しており、高度なWebアプリケーション開発に向いているFW。従来のFWの問題を解決するFWと言われている。

「Ajax」・・・地図サイトなどあるページを表示したまま、別ページへの移動や再読み込みを行わずに、Webサーバ側と通信をし、動的に表示内容を変更する手段。
「API」・・・ある機能と関係のないプログラムなどから、その機能を使うために用意された、窓口部分のこと。例えばインスタの投稿で、同時にTwitterでも投稿ができるなど。。。
「LAMP」・・・データベースを利用した、Webアプリケーションを開発・運用するのに適した、人気の高いオープンソースソフトウェアの組み合わせの一つ。Linux/Apach/MySQL/php,python,puelのこと。

「クラウドサーバー、レンタルサーバー、VPSの違い」
・クラウドサーバー・・・「複数の仮想サーバーを個別で利用」クラウド上にあるサーバーを利用する形式。インターネットを経由して、クラウド上に存在するサーバーにアクセスする。データのアップロードやダウンロードも、インターネット環境さえあれば可能なため、使い勝手に優れた形式と言える。仮想サーバーを利用するのも特徴で、１契約で複数の仮想サーバーを利用できる。
・レンタルサーバー・・・「１つの物理サーバーを複数ユーザーで共用する」。OS・データベース・HTTPサーバーをインストールした物理サーバーを、利用者で共有するもの。レンタルサーバーは小規模で利用されることが多く、他のユーザーの影響を受けやすいのが特徴。例えるならば、一つの部屋を複数のユーザーでシェアしている状況。
・VPS(Virtual Private Server)・・・「１つの仮想サーバー群を個別で利用」。サーバーに複数の仮想サーバーを構築し、その１つひとつをユーザーに貸し出す形式。もともと１つのものを分割して、仮想的に複数のサーバーがあるような状態にしており、マンションの１室を借りるようなイメージ。
「使い分けの目安」・・・小規模・コストを抑えたいなら「レンタルサーバー」、中規模・コスパ重視なら「VPS」、大規模・拡張の可能性があるなら「クラウドサーバー」がおすすめ。

「AWS」・・・Amazonが開発、提供している100種を超えるクラウドコンピューティングサービスの総称。

「プラットフォーム」・・・システムやサービスの土台や基盤となる環境のこと。例えば、Windowsで作られたAシステムのプラットフォームはWindows。

「カバレッジ」・・・プログラムのテストの際、どの程度をテスト対象とするかの範囲のこと。

「エビデンス」・・・テスト結果や記録など、証拠となるもの。

「コンパイル」・・・人間がわかる言葉で書いたコードを、機械が理解できるように翻訳すること。

「バッチ処理」・・・あらかじめ一連の手順を用意しておき、まとめて処理すること。

「デプロイ(意味と方法、FTPソフトの種類)」・・・開発したソフトやシステムを、実際の運用環境に展開すること。
「方法」
　・WARファイルのコピーによる展開
　・ディレクトリのコピーによる展開
「種類」
　・FFTP
　・WinSCP
　・CarotDAV
　・RootFTP
　・CoreFTP
　・FTPRuoh


「データベース接続クライアント(説明、代表的なもの)」・・・データベース管理システムや関係データベース管理システム上のデータを容易に扱うためのソフトウェアのこと。
代表例
　・MySQL
　・SQLite
　・PstgreSQL
　・MariaDB

Gitホスティングサービス(説明、代表的なもの)・・・Gitのプロジェクトをインターネット上で共有、公開することができるサービス。
「代表例」
　・Github
　・Gitlab
　・Bitbuchet
　・Assembla
　・Phabricator

チケット管理ツール(説明、代表的なもの)・・・タスクを管理するためのツールのこと。
「代表例」
　・backlog
　・Wrike
　・Trello

「DBのJOINとは」・・・複数のテーブルを合体させてまとめておく時に使う命令。

「SEO」・・・Googleなどのサーチエンジンの検索結果で上位に表示されるよう、Webページやサイトを最適化すること。またはそのための技術。

「オブジェクト指向」・・・プログラムを手順ではなくて、モノの作成と操作として見る考え方。例えばコーディング中、ある機能のコードの羅列が何度も出てくるとする。しかし、その羅列を毎回書いていたら時間がかかってしまう。そこでその羅列をまとめて「A」という操作に変え、Aの操作を実行しただけで、その機能を使うことができるようにするような感じ。配列だとか関数の考え。